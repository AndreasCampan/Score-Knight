{"version":3,"sources":["components/navigation/NavView.jsx","components/basicscore/BasicscoreView.jsx","components/doppelkopf/DoppelkopfView.jsx","components/nameinput/NameInputView.jsx","components/MainView.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.jsx"],"names":["NavView","className","React","Component","BasicScoreView","e","player","target","parentElement","childNodes","innerText","this","props","delPlayer","delBox","cardStyle","showDelete","onClick","processPlayer","playersArray","players","playersArrayCopy","drawPlayers","map","data","style","name","score","updateScore","id","scoreTable","sort","a","b","DoppelkopfView","NameInputView","onInput","changeDuplicate","setState","nameInput","value","handleSubmit","preventDefault","addPlayer","state","dupMessage","messageNum","duplicateName","onSubmit","autoComplete","type","onChange","placeholder","MainView","some","length","namesArray","push","elementsIndex","findIndex","el","playersCopy","playerOldScore","playersCopy2","filter","person","handleSelect","gameType","resetGame","window","confirm","resetScore","formattedArray","element","showDeletePlayer","prevState","gameScreen","delActive","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","App","StrictMode","ReactDOM","render","createElement","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.280de687.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navview.css'\r\n\r\nclass NavView extends React.Component {\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"nav-container\">\r\n        <h1 className=\"nav-title\">Score Knight</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavView;","import React from 'react';\r\nimport './basic.css'\r\n\r\nclass BasicScoreView extends React.Component {\r\n\r\n  processPlayer(e){\r\n    let player = e.target.parentElement.parentElement.childNodes[0].innerText\r\n    this.props.delPlayer(player);\r\n  }\r\n\r\n  render() {\r\n    let showDelete = this.props.showDelete;\r\n    let delBox;\r\n    let cardStyle\r\n  \r\n      if(showDelete === true) {\r\n        delBox = \r\n          <button className=\"del-container\" onClick={(e)=>{this.processPlayer(e)}}>\r\n            <span className=\"spinner top\"></span>\r\n            <span className=\"spinner bot\"></span>\r\n          </button>\r\n          cardStyle = { 'backgroundColor': 'rgb(200, 200, 200)'}\r\n      } else {\r\n        delBox = <div className=\"del-container\"></div>\r\n      }\r\n    const playersArray = this.props.players\r\n    let playersArrayCopy = [...playersArray]\r\n    let drawPlayers = playersArray.map((data) => {\r\n      return (\r\n      <li className=\"player-card\" key={data.id} style={ cardStyle }>\r\n        <span className=\"player-name\">{data.name}</span>\r\n        <span className=\"player-score\"> { data.score} </span>\r\n        { delBox }\r\n        <div className=\"bttn-container\">\r\n          <button style={ cardStyle } className=\"basic-bttn-minus up\" onClick={()=>{this.props.updateScore(data.name, -5)}}>-5</button>\r\n          <button style={ cardStyle } className=\"basic-bttn-minus down\" onClick={()=>{this.props.updateScore(data.name, -1)}}>-1</button>\r\n          <button style={ cardStyle } className=\"basic-bttn-plus down\" onClick={()=>{this.props.updateScore(data.name, 1)}}>+1</button>\r\n          <button style={ cardStyle } className=\"basic-bttn-plus up\" onClick={()=>{this.props.updateScore(data.name, 5)}}>+5</button>\r\n        </div>\r\n      </li>\r\n      )\r\n    });\r\n    \r\n    let sortedArray = playersArrayCopy.sort((a, b) => {\r\n      return b.score - a.score;\r\n    });\r\n\r\n    let scoreTable = sortedArray.map((data) => {\r\n      return (\r\n      <li className=\"st-player\" key={data.id}>\r\n        {data.name} <span className=\"st-score\">{ data.score }</span>\r\n      </li>\r\n      )\r\n    })\r\n\r\n    return(\r\n      <div className=\"basic-container\">\r\n        <div className=\"scoreboard\">\r\n          <h2 className=\"scoreboard-title\">Scoreboard</h2>\r\n          <ol className=\"totals-box\">\r\n            { scoreTable }\r\n          </ol>\r\n        </div>\r\n        <ul className=\"player-list\">\r\n          { drawPlayers }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BasicScoreView;","import React from 'react';\r\nimport './Doppelkopf.css'\r\n\r\nclass DoppelkopfView extends React.Component {\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"basic-container\">\r\n        <h1>Doppelkopf</h1>\r\n        <p>Coming Soon!</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default DoppelkopfView;","import React from 'react';\r\nimport './nameinput.css'\r\n\r\nclass NameInputView extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      nameInput: ''\r\n    }\r\n  }\r\n\r\n  onInput = (e) => {\r\n    this.props.changeDuplicate();\r\n    this.setState({\r\n      nameInput: e.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addPlayer(this.state.nameInput);\r\n    this.setState({ nameInput: ''});\r\n  }\r\n\r\n  render() {\r\n    let messageNum = this.props.duplicateName;\r\n    let dupMessage;\r\n\r\n    if (messageNum === 0) {\r\n      dupMessage = <div className=\"duplicate-name\"></div>\r\n    } else if (messageNum === 1) {\r\n      dupMessage = <div className=\"duplicate-name\">Please enter a name!</div>\r\n    } else if (messageNum === 2) {\r\n      dupMessage = <div className=\"duplicate-name\">The player already exists!</div>\r\n    } else {\r\n      dupMessage = <div className=\"duplicate-name\">Max 10 characters</div>\r\n    }\r\n\r\n    return(\r\n      <div className=\"nameInput-container\">\r\n        <div className=\"input-inner-box\">\r\n          <h2 className=\"add-players-title\">Add a Player:</h2>\r\n          <form name=\"Score\" onSubmit={this.handleSubmit} className=\"input-form\">\r\n            <input autoComplete=\"off\" type=\"text\" onChange={this.onInput} value={this.state.nameInput} id=\"nameinput\" placeholder=\"Type a Name...\" />\r\n            <button className=\"name-sub\" type='submit'>Submit</button>\r\n          </form>\r\n        </div>\r\n        { dupMessage }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NameInputView;","import React from 'react';\r\nimport './mainview.css';\r\nimport NavView from './navigation/NavView';\r\nimport BasicScoreView from './basicscore/BasicscoreView'\r\nimport DoppelkopfView from './doppelkopf/DoppelkopfView'\r\nimport NameInputView from './nameinput/NameInputView'\r\n\r\nclass MainView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gameType: 'basic',\r\n      players: [],\r\n      duplicateName: 0,\r\n      showDelete: false\r\n    };\r\n  }\r\n\r\n  addPlayer = (name) => {\r\n    let players = this.state.players\r\n    if (name === '') {\r\n      this.setState({ duplicateName: 1})\r\n      return\r\n    } else if (players.some(players => players.name === name)) {\r\n      this.setState({ duplicateName: 2});\r\n      return\r\n    } else if (name.length > 10) {\r\n      this.setState({ duplicateName: 3});\r\n      return\r\n    } else {\r\n      if (this.state.players.length === 0) {\r\n        this.setState({players: [{id: name, name: name, score: 0}]});\r\n      } else {\r\n        let namesArray = this.state.players\r\n        namesArray.push({id: name, name: name, score: 0})\r\n        this.setState({players: namesArray})\r\n      }\r\n      this.setState({ duplicateName: 0});\r\n    } \r\n  }\r\n\r\n  updateScore = (name, value) => {\r\n    const elementsIndex = this.state.players.findIndex(el => el.id === name);\r\n    let playersCopy = [...this.state.players];\r\n    let playerOldScore = this.state.players[elementsIndex].score\r\n\r\n    playersCopy[elementsIndex] = {...playersCopy[elementsIndex], score: value + playerOldScore }\r\n    \r\n    this.setState({ players: playersCopy})\r\n  }\r\n\r\n  delPlayer = (name) => {\r\n    let playersCopy = [...this.state.players];\r\n    let playersCopy2 = playersCopy.filter(person => person.name !== name);\r\n\r\n    this.setState({\r\n      players: playersCopy2\r\n    });\r\n  }\r\n\r\n  changeDuplicate = () =>  {\r\n    this.setState({duplicateName: 0})\r\n  }\r\n\r\n  handleSelect = (e) => {\r\n    this.setState({\r\n      gameType: e.target.value\r\n    })\r\n  }\r\n\r\n  resetGame = () => {\r\n    if(window.confirm('Are you sure you want to erase all game data?')){\r\n      this.setState({\r\n        players: []\r\n      });\r\n    } else {\r\n      return\r\n    }\r\n    \r\n  }\r\n\r\n  resetScore = () => {\r\n    let playersCopy2 = [...this.state.players];\r\n\r\n    let formattedArray = playersCopy2.map((element) => {\r\n      let array = {\"id\": element.name, \"name\": element.name, \"score\": 0}\r\n      return array\r\n    })\r\n\r\n    if(window.confirm(\"Are you sure you want to reset every player's score?\")){\r\n      this.setState({\r\n        players: formattedArray\r\n      });\r\n    } else {\r\n      return\r\n    }\r\n    \r\n  }\r\n\r\n  showDeletePlayer = () => {\r\n    this.setState(prevState => ({\r\n      showDelete: !prevState.showDelete\r\n    }))\r\n  }\r\n\r\n  render(){\r\n    let { gameType } = this.state;\r\n    let gameScreen;\r\n    let delActive;\r\n\r\n    if(this.state.showDelete === true) {\r\n      delActive = { 'backgroundColor': 'red'}\r\n    } else {\r\n      delActive = {}\r\n    }\r\n\r\n    if (gameType === 'basic') {\r\n      gameScreen = <BasicScoreView players={this.state.players} updateScore={this.updateScore} showDelete={this.state.showDelete} delPlayer={this.delPlayer} />\r\n    } else if (gameType === 'dopplekoff') {\r\n      gameScreen = <DoppelkopfView />\r\n    } else {\r\n      gameScreen = <div><p>Coming Soon!!</p></div>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <NavView />\r\n        <div className=\"app-container\">\r\n          <div className=\"gameselect-box\">            \r\n            <h2 className=\"title-1\">Select a Game:</h2>\r\n            <select name=\"games\" id=\"games\" value={this.state.gameType} onChange={this.handleSelect}>\r\n              <option value=\"basic\">Basic Score</option>\r\n              <option value=\"dopplekoff\">Dopplekoff</option>\r\n              <option value=\"president\">President</option>\r\n              <option value=\"rummyo\">Rummy-O</option>\r\n              <option value=\"wizard\">Wizard</option>\r\n            </select>\r\n          </div>\r\n          <NameInputView addPlayer={this.addPlayer} changeDuplicate={this.changeDuplicate} duplicateName={this.state.duplicateName}/>\r\n          <div className=\"bttn-controls-box\">\r\n            <button onClick={() => {this.resetGame()}}>Reset Game</button>\r\n            <button onClick={() => {this.resetScore()}}>Reset Score</button>\r\n            <button style={ delActive } onClick={() => {this.showDeletePlayer()}}>Edit Players</button>\r\n          </div>\r\n          {gameScreen}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainView\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainView from './components/MainView';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nclass App extends React.Component{\r\n  render() {\r\n    return(\r\n        <React.StrictMode>\r\n          <MainView />\r\n        </React.StrictMode>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(React.createElement(App), document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorkerRegistration.register();\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}